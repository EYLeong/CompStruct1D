/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg [23:0] io_led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input [4:0] io_button
  );
  
  
  
  reg rst;
  
  reg [15:0] aluResult;
  
  integer currentResult;
  
  integer currentAlufn;
  
  integer currentCase;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_2 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  wire [1-1:0] M_edge_detect_out;
  reg [1-1:0] M_edge_detect_in;
  edge_detector_3 edge_detect (
    .clk(clk),
    .in(M_edge_detect_in),
    .out(M_edge_detect_out)
  );
  wire [16-1:0] M_tester_a;
  wire [16-1:0] M_tester_b;
  wire [6-1:0] M_tester_alufn;
  wire [1-1:0] M_tester_err;
  wire [1-1:0] M_tester_complete;
  wire [4-1:0] M_tester_caseNum;
  alutester_4 tester (
    .clk(clk),
    .rst(M_edge_detect_out),
    .result(aluResult),
    .a(M_tester_a),
    .b(M_tester_b),
    .alufn(M_tester_alufn),
    .err(M_tester_err),
    .complete(M_tester_complete),
    .caseNum(M_tester_caseNum)
  );
  localparam WAIT_state = 2'd0;
  localparam TESTING_state = 2'd1;
  localparam FNERROR_state = 2'd2;
  localparam VALERROR_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = WAIT_state;
  
  wire [16-1:0] M_alu16_result;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  wire [1-1:0] M_alu16_err;
  alu_5 alu16 (
    .a(M_tester_a),
    .b(M_tester_b),
    .alufn(M_tester_alufn),
    .result(M_alu16_result),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n),
    .err(M_alu16_err)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_button_cond_in = io_button[1+0-:1];
    M_edge_detect_in = M_button_cond_out;
    io_led = 24'h000000;
    
    case (M_state_q)
      WAIT_state: begin
        io_led = 24'hffffff;
        if (M_edge_detect_out) begin
          M_state_d = TESTING_state;
        end
      end
      TESTING_state: begin
        aluResult = M_alu16_result;
        currentResult = M_alu16_result;
        currentAlufn = M_tester_alufn;
        currentCase = M_tester_caseNum;
        io_led[0+15-:16] = aluResult;
        io_led[16+5-:6] = M_tester_caseNum;
        io_led[22+1-:2] = 2'h0;
        if (M_edge_detect_out | M_tester_complete) begin
          M_state_d = WAIT_state;
        end
        if (M_alu16_err) begin
          M_state_d = FNERROR_state;
        end else begin
          if (M_tester_err) begin
            M_state_d = VALERROR_state;
          end
        end
      end
      FNERROR_state: begin
        io_led[22+0-:1] = 1'h1;
        io_led[23+0-:1] = 1'h0;
        io_led[16+5-:6] = currentCase;
        io_led[6+9-:10] = 1'h0;
        io_led[0+5-:6] = currentAlufn;
        if (M_edge_detect_out) begin
          M_state_d = WAIT_state;
        end
      end
      VALERROR_state: begin
        io_led[23+0-:1] = 1'h1;
        io_led[22+0-:1] = 1'h0;
        io_led[0+15-:16] = currentResult;
        io_led[16+5-:6] = currentCase;
        if (M_edge_detect_out) begin
          M_state_d = WAIT_state;
        end
      end
    endcase
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
  end
  
endmodule
