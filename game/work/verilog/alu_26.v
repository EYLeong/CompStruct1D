/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     WIDTH = WIDTH
*/
module alu_26 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] result,
    output reg z,
    output reg v,
    output reg n,
    output reg err
  );
  
  localparam WIDTH = 5'h10;
  
  
  localparam SHIFT_WIDTH = 3'h4;
  
  wire [16-1:0] M_add_sum;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  adder_30 add (
    .a(a),
    .b(b),
    .select(alufn[0+0-:1]),
    .sum(M_add_sum),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  wire [16-1:0] M_comp_result;
  comparator_31 comp (
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n),
    .select0(alufn[1+0-:1]),
    .select1(alufn[2+0-:1]),
    .result(M_comp_result)
  );
  
  wire [16-1:0] M_shift_result;
  shifter_32 shift (
    .select1(alufn[1+0-:1]),
    .select0(alufn[0+0-:1]),
    .a(a),
    .b(b[0+3-:4]),
    .result(M_shift_result)
  );
  
  wire [16-1:0] M_bool_result;
  boolean_33 bool (
    .select0(alufn[0+0-:1]),
    .select1(alufn[1+0-:1]),
    .select2(alufn[2+0-:1]),
    .select3(alufn[3+0-:1]),
    .a(a),
    .b(b),
    .result(M_bool_result)
  );
  
  wire [16-1:0] M_mult_product;
  multiplier_34 mult (
    .a(a),
    .b(b),
    .product(M_mult_product)
  );
  
  always @* begin
    z = 1'h0;
    v = 1'h0;
    n = 1'h0;
    err = 1'h0;
    if (alufn[5+0-:1]) begin
      if (alufn[4+0-:1]) begin
        if (!alufn[3+0-:1] & alufn[0+0-:1] & (alufn[2+0-:1] | alufn[1+0-:1])) begin
          result = M_comp_result;
        end else begin
          result = 1'h0;
          err = 1'h1;
        end
      end else begin
        if (!alufn[3+0-:1] & !alufn[2+0-:1]) begin
          result = M_shift_result;
        end else begin
          result = 1'h0;
          err = 1'h1;
        end
      end
    end else begin
      if (alufn[4+0-:1]) begin
        result = M_bool_result;
      end else begin
        if (alufn[1+0-:1]) begin
          if (!alufn[3+0-:1] & !alufn[2+0-:1] & !alufn[0+0-:1]) begin
            result = M_mult_product;
          end else begin
            result = 1'h0;
            err = 1'h1;
          end
        end else begin
          if (!alufn[3+0-:1] & !alufn[2+0-:1] & !alufn[1+0-:1]) begin
            result = M_add_sum;
            if (alufn[0+0-:1]) begin
              z = M_add_z;
              v = M_add_v;
              n = M_add_n;
            end
          end else begin
            result = 1'h0;
            err = 1'h1;
          end
        end
      end
    end
  end
endmodule
